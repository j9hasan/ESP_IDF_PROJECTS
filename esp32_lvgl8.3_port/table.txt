git submodule update --init components/j4210u-driver
1.under ui.c 
#include "ui.h"
#include "ui_helpers.h"
#include "stdio.h"

lv_obj_t *table;
//TagInfo ti;

void table_click_event(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_LONG_PRESSED)
    {
        printf("table long press");
        mem_screen(e);
        _ui_screen_delete(&ui_mainScreen);
        _ui_screen_change(&ui_memScreen, LV_SCR_LOAD_ANIM_MOVE_LEFT, 50, 0, &ui_memScreen_screen_init);
        // fflush(stdout);
    }
}

void test_btn_pressed(lv_event_t *e)
{
	// Your code here
	printf("test_btn_pressed\n");
	fflush(stdout);
}

void test_btn1_pressed(lv_event_t *e)
{
	// Your code here
	printf("test_btn1_pressed\n");
	fflush(stdout);
}

void test_btn2_pressed(lv_event_t *e)
{
	// Your code here
	printf("test_btn2_pressed\n");
	fflush(stdout);
}

2. in ui.h
    extern lv_obj_t *table;
    void table_click_event(lv_event_t *e);

3.in ui_mainscreen.c

    /*table*/
    table = lv_table_create(ui_mainScreen);

    lv_table_set_col_cnt(table, 2);
    lv_table_set_col_width(table, 1, 80);
    lv_table_set_col_width(table, 0, 240);
    lv_obj_set_height(table, 187);
    lv_table_set_cell_value(table, 0, 0, "EPC");
    lv_table_set_cell_value(table, 0, 1, "RSSI");
    lv_obj_align(table, LV_ALIGN_CENTER, 0, 0);
    lv_obj_set_pos(table, 0, 0);
    lv_obj_set_scroll_dir(table, LV_DIR_VER);
    lv_obj_set_style_pad_ver(table, 3, LV_PART_ITEMS);
    lv_obj_set_style_bg_color(table, lv_color_hex(0xfffbe6), LV_PART_ITEMS);
    // flags
    lv_obj_add_flag(table, LV_OBJ_FLAG_SCROLL_ONE | LV_OBJ_FLAG_PRESS_LOCK);
    lv_obj_clear_flag(table, LV_OBJ_FLAG_CLICK_FOCUSABLE | LV_OBJ_FLAG_GESTURE_BUBBLE | LV_OBJ_FLAG_SNAPPABLE | LV_OBJ_FLAG_SCROLL_ELASTIC | LV_OBJ_FLAG_SCROLL_MOMENTUM | LV_OBJ_FLAG_SCROLL_CHAIN);

    /*table scrolllbar styles*/
    // static lv_style_t table_scrollbar_style;
    // lv_style_init(&table_scrollbar_style);
    // lv_style_set_bg_color(&table_scrollbar_style, lv_color_hex(0xFF2400));
    // lv_style_set_width(&table_scrollbar_style, 14);
    // lv_style_set_pad_right(&table_scrollbar_style, 10);
    // lv_obj_add_style(table, &table_scrollbar_style, LV_PART_SCROLLBAR);
    /*table properties*/
    /*table event*/
    lv_obj_add_event_cb(table, table_click_event, LV_EVENT_LONG_PRESSED, NULL);




cmakelists.lv_label_set_text#SET(SOURCES components/ui_comp_normalbtn.c
#    components/ui_comp.c
#   screens/ui_mainScreen.c
#   ui.c
#   components/ui_comp_hook.c
#   ui_helpers.c)
#idf_component_register(SRCS ${SOURCES}
#                      INCLUDE_DIRS .
#                      REQUIRES lvgl)

#secondary sources in component

#file(GLOB secondary_lib components/*.c screens/.c ui_helpers.c ui.c ) #dereferencing
#idf_component_register(SRCS ${secondary_lib} INCLUDE_DIRS . REQUIRES lvgl )


SET(SOURCES ui_mainScreen.c
    ui_setupScreen.c
    ui.c
    ui_comp_hook.c
    ui_helpers.c
    ui_events.cpp
    ui_img_259472572.c
    ui_img_1743670017.c
    ui_img_settings11_png.c
    ui_img_sd_card_png.c
    ui_img_close_icon_png.c
    ui_img_home_png.c
    ui_img_sd_card_error_png.c)

#add_library(ui ${SOURCES})
idf_component_register(SRCS ${SOURCES}
                      INCLUDE_DIRS .
                      REQUIRES shared_task lvgl inventory)







///////////////////// FUNCTIONS ////////////////////
void table_click_event(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_LONG_PRESSED)
    {
        Serial.println("table event");
        u_int16_t row, col;
        lv_table_get_selected_cell(table, &row, &col);
        // lv_table_get_selected_cell(table, 1, 0);
        // Serial.printf("row: %u, col %u\n", row, col);
        if (row > 0 && col < 1)
        {
            const char *st = lv_table_get_cell_value(table, row, col);
            Serial.println(st);

            int n = getInventory(uhf);
            char str[32];
            for (int i = 0; i < n; i++)
            {
                ScanData *sd = uhf.GetResult(i);
                if (sd == 0)
                    break;
                cprintf("Getting TID for tag %d\n", i);
                unsigned char tid[16];
                unsigned char tidlen = 0;
                // if(sd->EPCNUM)
                bytes2hex(sd->EPCNUM, sd->epclen, str);
                if (!strcmp(st, str))
                {
                    Serial.printf("epcnum = %s found at index %d\n", str, i);
                    if (uhf.GetTID(sd->EPCNUM, sd->epclen, tid, &tidlen))
                    {
                        // uhf.printtag(i);
                        bytes2hex(tid, tidlen, str);
                        // bytes2hex(sd->EPCNUM, sd->epclen, str);
                        uhf.GetTagInfo(tid, &ti);
                        Serial.printf("tid %s, taginfo: chip %s\n", str, ti.chip);
                        cprintf("TID: %s\n", str);
                        // Serial.printf("epcnum = %s\n", str);
                    }
                }
                else
                {
                    Serial.printf("not found\n");
                }
            }
            lv_obj_move_background(table);
            lv_obj_move_foreground(ui_MemPanel);
            _ui_flag_modify(ui_MemPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
            lv_label_set_text(ui_chipTypeLabel, ti.chip);
            lv_label_set_text(ui_epcSizeLabel1, intToString(ti.epclen));
            lv_label_set_text(ui_PWDsizeLabel3, intToString(ti.pwdlen));
            lv_label_set_text(ui_userSizeLabel1, intToString(ti.userlen));
            uint16_t totalmem = (ti.epclen) + (ti.userlen) + ti.tidlen + (ti.pwdlen * 2) + 4;
            lv_label_set_text(ui_totatMemoryLabel1, intToString(totalmem));
        }
    }
}
void ui_event_memBtn(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        // lv_obj_move_background(table);
        // lv_obj_move_foreground(ui_MemPanel);
        // _ui_flag_modify(ui_MemPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    }
}